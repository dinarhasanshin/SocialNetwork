{"version":3,"sources":["api/api.ts","utils/object-helpers.ts","api/users-api.ts","redux/peoples_reducer.ts","api/auth-api.ts","api/security-api.tsx","redux/auth_reducer.ts","components/Header/Header.module.css","components/Login/login.module.css","utils/validators/validators.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/login.tsx","redux/app_reducer.ts","components/NavWrapper/NavWrapper.tsx","App.tsx","reportWebVitals.js","redux/messages_reducer.ts","redux/redux-store.ts","index.tsx","api/profile-api.ts","components/common/PreLoader/PreLoader.tsx","components/common/FormsControl/FormsControl.tsx","components/NavWrapper/NavWrapper.module.css","components/common/PreLoader/PreLoader.module.css","components/common/FormsControl/FormsControl.module.css","assets/images/defaulIconProfile.png","redux/profile_reducer.ts"],"names":["ResultCodesEnum","ResultCodesCaptchaUrlEnum","instance","axios","create","withCredentials","baseURL","headers","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","usersAPI","getUsers","currentPage","pageSize","term","isFriends","get","then","response","data","follow","userId","post","unFollow","delete","initialState","friendsCollection","totalUserCount","isFetching","isFollowing","filter","actions","type","setUsers","users","setIsFriends","setTermSearch","setCurrentPage","setTotalUsersCount","totalUsersCount","toggleIsFetching","toggleIsFollowing","dispatch","a","totalCount","userFollowUnFollowFlow","apiMethod","actionCreator","resultCode","userFollow","bind","userUnFollow","peoples_reducer","state","action","followed","id","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","authProfile","profile","url","payload","userAuth","Success","authLogin","getCaptchaUrl","message","messages","length","stopSubmit","_error","authLogout","setAuthUserProfile","profileAPI","getProfile","auth_reducer","module","exports","maxLength","Header","props","className","s","header","header_logo","header_auth","onClick","toggleLogOutMenu","auth_name","photos","large","auth_img","src","userPhoto","alt","icon","angleDown","to","logOutMenu","authLogOutRedirect","HeaderContainer","setState","history","push","this","React","Component","compose","connect","auth","profilePage","withRouter","LoginReduxForm","reduxForm","form","handleSubmit","error","login_container_form","content_block_size","header_login_form","onSubmit","login_form","Field","component","Input","name","placeholder","login_checkbox_input","loginFormError","login_button","login_page","formData","initialized","AppReducer","NavWrapper","nav_wrapper","userCircle","nav_icons","commentIcon","usersAlt","PeoplesPageContainer","lazy","ProfilePageContainer","App","initializeApp","exact","path","render","fallback","PreLoader","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_MESSAGE","dialogs_data","messages_data","messages_reducer","newMessageText","rootReducer","combineReducers","profile_reducer","messagesPage","friendsPage","formReducer","app_reducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","document","getElementById","getStatus","updateStatus","status","put","savePhoto","photoFile","FormData","append","saveProfile","preloader","ldsCircle","PreLoaderApp","preloaderApp","input","meta","touched","hasError","warn","postsCollection","isOwner","newPostText","addPost","setProfile","setStatus","setIsOwner","savePhotoSuccess","addPostProfile","undefined","setUserProfile","getUserStatus","updateUserStatus","file","getState","Error","username","fullName"],"mappings":"mIAAA,wEAaYA,EAKAC,EAlBZ,SAIaC,EAJb,OAIwBC,EAAMC,OAC7B,CACGC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAY,2C,SAIRP,O,qBAAAA,I,kBAAAA,M,cAKAC,O,uBAAAA,M,0NCjBCO,EAAsB,SAACC,EAAYC,EAAaC,EAAkBC,GAC3E,OAAOH,EAAMI,KAAI,SAACC,GACd,OAAIA,EAAEH,KAAiBD,EACZ,2BAAII,GAAMF,GAEdE,M,QCHFC,EAAW,CACpBC,SAAU,WAA0F,IAAzFC,EAAwF,uDAA1E,EAAGC,EAAuE,uDAA5D,GAAIC,EAAwD,uDAAzC,GAAIC,EAAqC,uDAAT,KACtF,OAAOlB,IAASmB,IACf,qBAAcJ,EAAd,kBAAmCC,EAAnC,iBAAoDC,IAAwB,OAAdC,EAAqB,GAArB,kBAAqCA,KAAcE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEhJC,OAAQ,SAACC,GACL,OAAOxB,IAASyB,KAAK,UAAYD,GAAQJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEvEI,SAAU,SAACF,GACP,OAAOxB,IAAS2B,OAAO,UAAYH,GAAQJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCLzEM,EAAe,CACfC,kBAAmB,GACnBb,SAAU,GACVc,eAAgB,EAChBf,YAAa,EACbgB,YAAY,EACZC,YAAa,GACbC,OAAQ,CACJf,UAAW,KACXD,KAAM,KAmDDiB,EAAU,CACnBX,OAAQ,SAACC,GAAD,MAAqB,CAACW,KAAM,SAAUX,WAC9CE,SAAU,SAACF,GAAD,MAAqB,CAACW,KAAM,WAAYX,WAClDY,SAAU,SAACC,GAAD,MAA0C,CAACF,KAAM,YAAaE,UACxEC,aAAc,SAACpB,GAAD,MAAgC,CAACiB,KAAM,iBAAkBjB,cACvEqB,cAAe,SAACtB,GAAD,MAAmB,CAACkB,KAAM,qBAAsBlB,SAC/DuB,eAAgB,SAACzB,GAAD,MAA0B,CAACoB,KAAM,mBAAoBpB,gBACrE0B,mBAAoB,SAACC,GAAD,MAA8B,CAACP,KAAM,kBAAmBO,oBAC5EC,iBAAkB,SAACZ,GAAD,MAA0B,CAACI,KAAM,qBAAsBJ,eACzEa,kBAAkB,SAACb,EAAqBP,GAAtB,MAA0C,CAACW,KAAM,sBAAuBJ,aAAYP,YAO7FV,EAAW,SAACC,EAAqBC,EAAkBC,EAAeC,GAAvD,8CAAwG,WAAO2B,GAAP,eAAAC,EAAA,6DAE5HD,EAASX,EAAQM,eAAezB,IAChC8B,EAASX,EAAQS,kBAAiB,IAH0F,SAK3G9B,EAASC,SAASC,EAAaC,EAAUC,EAAMC,GAL4D,OAKxHI,EALwH,OAO5HuB,EAASX,EAAQS,kBAAiB,IAClCE,EAASX,EAAQE,SAASd,EAAKf,QAC/BsC,EAASX,EAAQO,mBAAmBnB,EAAKyB,aATmF,2CAAxG,uDAYlBC,EAAsB,uCAAG,WAAOH,EAAiCrB,EACjCyB,EAAgBC,GADvB,SAAAJ,EAAA,6DAG3BD,EAASX,EAAQU,mBAAkB,EAAMpB,IAHd,SAKVyB,EAAUzB,GALA,OAOH,IAPG,OAOlB2B,aACLN,EAASX,EAAQU,mBAAkB,EAAOpB,IAC1CqB,EAASK,EAAc1B,KATA,2CAAH,4DAcf4B,EAAa,SAAC5B,GAAD,8CAAsC,WAAOqB,GAAP,SAAAC,EAAA,sEACtDE,EAAuBH,EAAUrB,EAAQX,EAASU,OAAO8B,KAAKxC,GAAWqB,EAAQX,QAD3B,2CAAtC,uDAIb+B,EAAe,SAAC9B,GAAD,8CAAsC,WAAOqB,GAAP,SAAAC,EAAA,sEACxDE,EAAuBH,EAAUrB,EAAQX,EAASa,SAAS2B,KAAKxC,GAAWqB,EAAQR,UAD3B,2CAAtC,uDAKb6B,IA/FS,WAA+D,IAA9DC,EAA6D,uDAArD5B,EAAc6B,EAAuC,uCAElF,OAAQA,EAAOtB,MAEX,IAAK,SACD,OAAO,2BACAqB,GADP,IAEI3B,kBAAmBvB,EAAoBkD,EAAM3B,kBACzC4B,EAAOjC,OAAQ,KAAM,CAACkC,UAAU,MAE5C,IAAK,WACD,OAAO,2BACAF,GADP,IAEI3B,kBAAmBvB,EAAoBkD,EAAM3B,kBACzC4B,EAAOjC,OAAQ,KAAM,CAACkC,UAAU,MAE5C,IAAK,YACD,OAAO,2BAAIF,GAAX,IAAkB3B,kBAAmB4B,EAAOpB,QAChD,IAAK,mBACD,OAAO,2BAAImB,GAAX,IAAkBzC,YAAa0C,EAAO1C,cAC1C,IAAK,kBACD,OAAO,2BAAIyC,GAAX,IAAkB1B,eAAgB2B,EAAOf,kBAC7C,IAAK,qBACD,OAAO,2BAAIc,GAAX,IAAkBzB,WAAY0B,EAAO1B,aACzC,IAAK,iBACD,OAAO,2BAAIyB,GAAX,IAAkBvB,OAAO,2BAAKuB,EAAMvB,QAAZ,IAAoBf,UAAWuC,EAAOvC,cAClE,IAAK,qBACD,OAAO,2BAAIsC,GAAX,IAAkBvB,OAAO,2BAAKuB,EAAMvB,QAAZ,IAAoBhB,KAAMwC,EAAOxC,SAC7D,IAAK,sBACD,OAAO,2BACAuC,GADP,IAEIxB,YAAayB,EAAO1B,WAAP,sBACHyB,EAAMxB,aADH,CACgByB,EAAOjC,SAC9BgC,EAAMxB,YAAYC,QAAO,SAAA0B,GAAE,OAAIA,IAAOF,EAAOjC,YAG3D,QACI,OAAOgC,K,2NC9CNI,EACA,WACL,OAAO5D,IAASmB,IAAT,WAA6DC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAFzFsC,EAIF,SAACC,EAAeC,GAAkF,IAAhEC,EAA+D,wDAAlCC,EAAkC,uDAAT,KAC3F,OAAOhE,IAASyB,KAAT,aAAoE,CAACoC,QAAOC,WAAUC,aAAYC,YAAU5C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SALxIsC,EAOD,WACJ,OAAO5D,IAAS2B,OAAT,cAA8BP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,QChB1D2C,EACM,WACX,OAAOjE,IAASmB,IAAT,4BAAyDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCE9FM,EAAe,CACf+B,GAAI,KACJO,MAAO,KACPL,MAAO,KACPM,QAAQ,EACRC,WAAY,KACZC,YAAa,MAgCJnC,EACQ,SAACyB,EAAmBO,EAAsBL,EAAsBM,GAAhE,MACZ,CAAChC,KAAM,gBAAiBb,KAAM,CAACqC,KAAIO,QAAOL,QAAOM,YAF7CjC,EAGO,SAACoC,GAAD,MACX,CAACnC,KAAM,mBAAoBmC,YAJvBpC,EAKM,SAACqC,GAAD,MACV,CAACpC,KAAM,cAAeqC,QAASD,IAS3BE,EAAW,yDAAwB,WAAO5B,GAAP,uBAAAC,EAAA,sEAC3Bc,IAD2B,QACxCtC,EADwC,QAGnC6B,aAAerD,IAAgB4E,UAAU,EACrBpD,EAAKA,KAAzBqC,EADwC,EACxCA,GAAIO,EADoC,EACpCA,MAAOL,EAD6B,EAC7BA,MAChBhB,EAASX,EAAwByB,EAAIO,EAAOL,GAAO,KALX,2CAAxB,uDASXc,EAAY,SAACd,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAA8F,WAAOnB,GAAP,iBAAAC,EAAA,sEAClGc,EAAcC,EAAOC,EAAUC,EAAYC,GADuD,OAG3F,KAFpB1C,EAD+G,QAG1G6B,WACLN,EAAS4B,MAGc,KAApBnD,EAAK6B,YACJN,EAAS+B,KAETC,EAAUvD,EAAKwD,SAASC,OAAS,EAAIzD,EAAKwD,SAAS,GAAK,aAE5DjC,EAASmC,YAAW,QAAS,CAACC,OAAQJ,MAZyE,2CAA9F,uDAgBZK,EAAa,yDAAwB,WAAOrC,GAAP,SAAAC,EAAA,sEAC7Bc,IAD6B,OAGtB,IAHsB,OAGrCT,aACLN,EAASX,EAAwB,KAAM,KAAM,MAAM,IACnDW,EAASX,EAAsB,QALW,2CAAxB,uDASb0C,EAAgB,yDAAwB,WAAO/B,GAAP,eAAAC,EAAA,sEAChCmB,IADgC,QAC7C3C,EAD6C,SAG7CuB,EAASX,EAAsBZ,EAAKiD,MAHS,2CAAxB,uDAQhBY,EAAqB,SAAC3D,GAAD,8CAAsC,WAAOqB,GAAP,eAAAC,EAAA,sEACnDsC,IAAWC,WAAW7D,GAD6B,OAChEF,EADgE,OAEpEuB,EAASX,EAAuBZ,IAFoC,2CAAtC,uDAKnBgE,IAzFM,WAAkE,IAAjE9B,EAAgE,uDAAxD5B,EAAc6B,EAA0C,uCAElF,OAAQA,EAAOtB,MAEX,IAAK,gBACD,OAAO,2BACAqB,GACAC,EAAOnC,MAElB,IAAK,mBACD,OAAO,2BACAkC,GADP,IAEIa,YAAaZ,EAAOa,UAE5B,IAAK,cACD,OAAO,2BACAd,GADP,IAEIY,WAAYX,EAAOe,UAE3B,QACI,OAAOhB,K,mBCxCnB+B,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,4BAA4B,YAAc,4BAA4B,UAAY,0BAA0B,SAAW,yBAAyB,WAAa,6B,mBCA7ND,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,kBAAoB,iCAAiC,WAAa,0BAA0B,mBAAqB,kCAAkC,qBAAuB,oCAAoC,YAAc,2BAA2B,WAAa,0BAA0B,qBAAuB,oCAAoC,aAAe,8B,kECQxYC,E,wHCuClBC,EA7BqB,SAACC,GAEjC,OACI,yBAAQC,UAAWC,IAAEC,OAArB,UACI,mBAAGF,UAAWC,IAAEE,YAAhB,gBAGCJ,EAAMxB,OACD,uBAAMyB,UAAWC,IAAEG,YAAaC,QAAUN,EAAMO,iBAAhD,UACE,oBAAGN,UAAWC,IAAEM,UAAhB,UAA+BR,EAAMzB,MAArC,OACmB,OAAlByB,EAAMrB,SAAmD,OAA/BqB,EAAMrB,QAAQ8B,OAAOC,MAC1C,qBAAKT,UAAWC,IAAES,SAAUC,IAAKC,IAAWC,IAAK,KACjD,qBAAKb,UAAWC,IAAES,SAAUC,IAAKZ,EAAMrB,QAAQ8B,OAAOC,MAAOI,IAAK,KAJ1E,IAKI,cAAC,aAAD,CAAYC,KAAMC,SAIxB,sBAAMf,UAAWC,IAAEG,YAAnB,SACI,cAAC,IAAD,CAASY,GAAI,SAAUhB,UAAWC,IAAEM,UAApC,qBAGPR,EAAMxB,QAAUwB,EAAMkB,YACpB,qBAAKjB,UAAWC,IAAEgB,WAAlB,SACC,wBAAQZ,QAAUN,EAAMmB,mBAAxB,2B,gCCXVC,E,4MAQFvD,MAAQ,CACJqD,YAAY,G,EAGhBX,iBAAmB,WACf,EAAKc,SAAS,CACVH,YAAa,EAAKrD,MAAMqD,c,EAGhCC,mBAAqB,WACjB,EAAKnB,MAAMT,aACR,EAAKS,MAAMxB,QACV,EAAKwB,MAAMsB,QAAQC,KAAK,a,kEAjBzBC,KAAKxB,MAAMhC,IACVwD,KAAKxB,MAAMR,mBAAmBgC,KAAKxB,MAAMhC,M,+BAqB7C,OACI,cAAC,EAAD,2BAAYwD,KAAKxB,OAAjB,IAAwBmB,mBAAqBK,KAAKL,mBAAqBZ,iBAAmBiB,KAAKjB,iBAAmBW,WAAaM,KAAK3D,MAAMqD,kB,GA1BxHO,IAAMC,WA4CrBC,cACXC,aAbkB,SAAC/D,GACnB,MAAM,CACFG,GAAIH,EAAMgE,KAAK7D,GACfQ,OAAQX,EAAMgE,KAAKrD,OACnBD,MAAOV,EAAMgE,KAAKtD,MAClBI,QAASd,EAAMgE,KAAKnD,YACpBoD,YAAajE,EAAMiE,YAAYnD,WAQ/B,CAACG,aAAUS,eAAYC,yBAC3BuC,IAHWJ,CAIbP,G,2CCnBIY,GHnD2BlC,EGGE,GAgDZmC,YAA6C,CAAEC,KAAM,SAArDD,EAzCnB,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAO3D,EAAgB,EAAhBA,WACvB,OACI,sBAAKwB,UAAWC,IAAEmC,qBAAuB,IAAMnC,IAAEoC,mBAAjD,UACI,sBAAKrC,UAAWC,IAAEqC,kBAAlB,UACI,mBAAGtC,UAAWC,IAAEE,YAAhB,gBAGA,6CAIJ,uBAAMoC,SAAUL,EAAclC,UAAWC,IAAEuC,WAA3C,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAOC,KAAM,QACxBC,YAAa,uDACpB,cAACJ,EAAA,EAAD,CAAOC,UAAWC,IAAOC,KAAM,WACxBC,YAAa,6CAAgBtG,KAAM,aAE1C,sBAAKyD,UAAWC,IAAE6C,qBAAlB,UACI,cAACL,EAAA,EAAD,CAAQC,UAAWC,IAAOC,KAAM,aACzBrG,KAAK,aAFhB,kBAMIiC,GAAc,qBAAKmC,IAAKnC,EAAYqC,IAAI,KAGxCrC,GAAc,cAACiE,EAAA,EAAD,CAAOC,UAAWC,IAAOC,KAAM,UACxBC,YAAa,0HAGxB,OAAVV,GAAkB,qBAAKnC,UAAWC,IAAE8C,eAAlB,SAAmCZ,IAEzD,qBAAKnC,UAAWC,IAAE+C,aAAlB,SACI,yDAmDLrB,eARO,SAAC/D,GACnB,MAAM,CACFW,OAAQX,EAAMgE,KAAKrD,OACnBC,WAAYZ,EAAMgE,KAAKpD,cAKS,CAAEO,eAA3B4C,EAzBmD,SAAC5B,GAM/D,OAAIA,EAAMxB,OACC,cAAC,IAAD,CAAUyC,GAAI,aAGlB,qBAAKhB,UAAWC,IAAEgD,WAAlB,SAEH,cAAClB,EAAD,CAAgBQ,SAVH,SAACW,GACdnD,EAAMhB,UAAUmE,EAASjF,MAAOiF,EAAShF,SAAUgF,EAAS/E,WAAY+E,EAAS9E,UAS3CI,WAAauB,EAAMvB,kBCrF7DxC,EAAe,CACfmH,aAAa,GAmBJ7G,EACW,iBAAO,CAACC,KAAM,oBAqBvB6G,EApCI,WAAkE,IAAjExF,EAAgE,uDAAxD5B,EAAc6B,EAA0C,uCAChF,OAAQA,EAAOtB,MACX,IAAK,kBACD,kCACOqB,GADP,IAEIuF,aAAa,IAErB,QACI,OAAOvF,I,qDCmBJyF,EA7BI,WACf,OACI,yBAASrD,UAAWC,IAAEqD,YAAtB,SACI,8BACI,+BACI,6BACI,eAAC,IAAD,CAAStC,GAAG,WAAZ,UACI,cAAC,aAAD,CAAYF,KAAOyC,IAAavD,UAAWC,IAAEuD,YADjD,kBAKJ,6BACI,eAAC,IAAD,CAASxC,GAAG,YAAZ,UACI,cAAC,aAAD,CAAYF,KAAO2C,IAAczD,UAAWC,IAAEuD,YADlD,gBAKJ,6BACI,eAAC,IAAD,CAASxC,GAAG,WAAZ,UACI,cAAC,aAAD,CAAYF,KAAO4C,IAAW1D,UAAWC,IAAEuD,YAD/C,uB,QCdlBG,EAAuBnC,IAAMoC,MAAK,kBAAM,uDACxCC,EAAuBrC,IAAMoC,MAAK,kBAAM,iCAQxCE,E,kLAGEvC,KAAKxB,MAAMgE,kB,+BAKX,OAAIxC,KAAKxB,MAAMoD,YAIX,eAAC,IAAD,WACI,sBAAKnD,UAAU,YAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOgE,OAAK,EAACC,KAAK,IACXC,OAAQ,WACJ,OAAO,cAAC,IAAD,CAAUlD,GAAG,gBAE/B,cAAC,IAAD,CAAOiD,KAAK,WACLC,OAAQ,WACJ,OAAO,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,IAApB,SAAkC,cAACT,EAAD,SAGpD,cAAC,IAAD,CAAOM,KAAK,oBACLC,OAAQ,WACJ,OAAO,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,IAApB,SAAkC,cAACP,EAAD,eAQ5D,cAAC,IAAD,CAAOI,KAAK,SAASC,OAAQ,kBAAM,cAAC,EAAD,UA3BhC,cAACE,EAAA,EAAD,Q,GATD5C,IAAMC,WAgDTC,cACXI,IACAH,aARkB,SAAC/D,GACnB,MAAM,CACFuF,YAAavF,EAAMyG,IAAIlB,eAMF,CAACY,cF3CD,kBACgC,SAAC9G,GAC5CA,EAAS4B,eAUfrD,MAAK,WACTyB,EAASX,YE4BFoF,CAGVoC,GC7DUQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhJ,MAAK,YAAkD,IAA/CiJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCPRO,EAAc,cAahB9I,EAAe,CAEf+I,aAAc,CACV,CAAChH,GAAI,EAAG6E,KAAM,cACd,CAAC7E,GAAI,EAAG6E,KAAM,SACd,CAAC7E,GAAI,EAAG6E,KAAM,QACd,CAAC7E,GAAI,EAAG6E,KAAM,UAElBoC,cAAe,CACX,CAACjH,GAAI,EAAGkB,QAAS,UACjB,CAAClB,GAAI,EAAGkB,QAAS,gBACjB,CAAClB,GAAI,EAAGkB,QAAS,sBACjB,CAAClB,GAAI,EAAGkB,QAAS,YA6BVgG,EAvBU,WAAsD,IAArDrH,EAAoD,uDAA5C5B,EAAc6B,EAA8B,uCAE1E,OAAQA,EAAOtB,MAEX,KAAKuI,EACD,OAAO,2BACAlH,GADP,IAGIoH,cAAc,GAAD,mBAAMpH,EAAMoH,eAAZ,CAA2B,CAACjH,GAAI,EAAGkB,QAASpB,EAAOqH,oBAExE,QACI,OAAOtH,I,6BCjCfuH,GAAcC,YAAgB,CAC9BvD,YAAawD,IACbC,aAAcL,EACdM,YAAa5H,IACbiE,KAAMlC,IACNuC,KAAMuD,KACNnB,IAAKoB,IAcHC,GAAmBC,OAAOC,sCAAwClE,IAIzDmE,GAFDC,YAAYX,GAAaO,GAAiBK,YAAgBC,QCvBxE9B,iBAEI,cAAC,IAAD,UACI,cAAC,IAAD,CAAU2B,MAAQA,GAAlB,SACI,cAAC,EAAD,QAGRI,SAASC,eAAe,SAY5B5B,K,gCC1BA,8CAOa9E,EAAa,CACtBC,WAAY,SAAC7D,GACT,OAAOxB,IAASmB,IAAiB,WAAaK,GAAQJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEpFyK,UAAW,SAACvK,GACR,OAAOxB,IAASmB,IAAY,kBAAoBK,GAAQJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEtF0K,aAAc,SAACC,GACX,OAAOjM,IAASkM,IAAT,iBAAgD,CAACD,OAAQA,IAAS7K,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEvG6K,UAAW,SAACC,GACR,IAAItD,EAAW,IAAIuD,SAEnB,OADAvD,EAASwD,OAAO,QAASF,GAClBpM,IAASkM,IAAT,gBAAsEpD,EAAU,CACnFzI,QAAS,CACL,eAAgB,yBAErBe,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEjCiL,YAAa,SAACjI,GACV,OAAOtE,IAASkM,IAAT,UAAwB5H,GAASlD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,qGCd3D0I,IAVG,WACd,OACI,qBAAKpE,UAAWC,IAAE2G,UAAlB,SACI,qBAAK5G,UAAWC,IAAE4G,UAAlB,SACI,6BAQT,IAAMC,EAAe,WACxB,OACI,qBAAK9G,UAAWC,IAAE8G,aAAlB,SACI,qBAAK/G,UAAWC,IAAE4G,UAAlB,SACI,8B,oHCIHlE,EAAyB,SAAC,GAA+C,IAA9CqE,EAA6C,EAA7CA,MAA6C,IAAtCC,KAAOC,EAA+B,EAA/BA,QAAS/E,EAAsB,EAAtBA,MAAWpC,EAAW,gCAE3EoH,EAAkCD,GAAW/E,EAEnD,OACI,sBAAKnC,WAAYmH,EAAWlH,IAAEkC,MAAQ,IAAM,KAAOgF,EAAWlH,IAAEmH,KAAO,IAAvE,UACI,iDAAWJ,GAAWjH,IACpBoH,GAAY,oCAAM,+BAAQhF,IAAd,Y,mBC9B1BxC,EAAOC,QAAU,CAAC,YAAc,gCAAgC,UAAY,gC,mBCA5ED,EAAOC,QAAU,CAAC,UAAY,6BAA6B,aAAe,gCAAgC,UAAY,+B,mBCAtHD,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,KAAO,6B,gCCD9C,QAA0B,+C,iVCerC5D,EAAe,CACf0C,QAAS,KACT2I,gBAAiB,GACjBhB,OAAQ,GACRiB,SAAS,EACTC,YAAa,IAwCJjL,EAAU,CACnBkL,QAAS,SAACD,GAAD,MAA0B,CAAChL,KAAM,WAAYgL,gBACtDE,WAAY,SAAC/I,GAAD,MAAmB,CAACnC,KAAM,cAAemC,YACrDgJ,UAAW,SAACrB,GAAD,MAAqB,CAAC9J,KAAM,aAAc8J,WACrDsB,WAAY,SAACL,GAAD,MAAuB,CAAC/K,KAAM,eAAgB+K,YAC1DM,iBAAkB,SAACpH,GAAD,MAAkB,CAACjE,KAAM,qBAAsBiE,YAMxDqH,EAAiB,SAACN,GAAD,8CAA2C,WAAOtK,GAAP,SAAAC,EAAA,sDAIjED,OAFe6K,IAAhBP,EAEUnI,YAAW,UAAW,CAAE+C,MAAO,yBAE/B7F,EAAQkL,QAAQD,IANwC,2CAA3C,uDAWjBQ,EAAiB,SAACnM,GAAD,8CAAsC,WAAOqB,GAAP,eAAAC,EAAA,sEAC/CsC,IAAWC,WAAW7D,GADyB,OAC5DF,EAD4D,OAGhEuB,EAASX,EAAQmL,WAAW/L,IAHoC,2CAAtC,uDAOjBsM,EAAgB,SAACpM,GAAD,8CAAsC,WAAOqB,GAAP,eAAAC,EAAA,sEAC9CsC,IAAW2G,UAAUvK,GADyB,OAC3DF,EAD2D,OAG/DuB,EAASX,EAAQoL,UAAUhM,IAHoC,2CAAtC,uDAOhBuM,EAAmB,SAAC5B,GAAD,8CAAsC,WAAOpJ,GAAP,SAAAC,EAAA,sEACjDsC,IAAW4G,aAAaC,GADyB,OAG1C,IAH0C,OAGzD9I,YACLN,EAASX,EAAQoL,UAAUrB,IAJmC,2CAAtC,uDAQnBE,EAAY,SAAC2B,GAAD,8CAAkC,WAAOjL,EAAUkL,GAAjB,iBAAAjL,EAAA,6DACjDtB,EAASuM,IAAWvG,KAAK7D,GADwB,SAEtCyB,IAAW+G,UAAU2B,GAFiB,UAI/B,KAFpBxM,EAFmD,QAI9C6B,WAJ8C,oBAKnDN,EAASX,EAAQsL,iBAAiBlM,EAAKA,KAAK8E,SAC7B,OAAX5E,EAN+C,iCAOzCqB,EAASsC,YAAmB3D,IAPa,qCASzC,IAAIwM,MAAM,wBAT+B,4CAAlC,yDAcZzB,EAAc,SAACjI,GAAD,8CAA4C,WAAOzB,EAAUkL,GAAjB,eAAAjL,EAAA,6DAC7DtB,EAASuM,IAAWvG,KAAK7D,GADoC,SAElDyB,IAAWmH,YAAYjI,GAF2B,UAI3C,IAJ2C,OAI1DnB,WAJ0D,oBAKhD,OAAX3B,EAL2D,iCAMrDqB,EAAS8K,EAAenM,IAN6B,wBAOrDqB,EAASsC,YAAmB3D,IAPyB,sCASrD,IAAIwM,MAAM,wBAT2C,4CAA5C,yDAgBZ/C,IA7GS,WAAkE,IAAjEzH,EAAgE,uDAAxD5B,EAAc6B,EAA0C,uCAErF,OAAQA,EAAOtB,MAEX,IAAK,WACD,OAAO,2BACAqB,GADP,IAEI2J,YAAa,GAEbF,gBAAgB,GAAD,mBAAMzJ,EAAMyJ,iBAAZ,CAA6B,CAACtJ,GAAI,EAAGkB,QAASpB,EAAO0J,YAAac,SAAUzK,EAAMc,QAAQ4J,cAEjH,IAAK,cACD,OAAO,2BAAI1K,GAAX,IAAkBc,QAASb,EAAOa,UAEtC,IAAK,aACD,OAAqB,OAAlBb,EAAOwI,QAAqC,KAAlBxI,EAAOwI,OACzB,2BAAIzI,GAAX,IAAkByI,OAAQ,uBAGnB,2BAAIzI,GAAX,IAAkByI,OAAQxI,EAAOwI,SAEzC,IAAK,qBACD,OAAO,2BAAIzI,GAAX,IAAkBc,QAAQ,2BAAKd,EAAMc,SAAZ,IAAqB8B,OAAQ3C,EAAO2C,WAEjE,IAAK,eACD,OAAO,2BAAI5C,GAAX,IAAkB0J,QAASzJ,EAAOyJ,UAEtC,QACI,OAAO1J,M","file":"static/js/main.03e69203.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {FriendsCollectionType} from \"../types/types\";\r\n\r\n\r\nexport const instance = axios.create\r\n({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\" : \"edee3bdd-3755-424a-b6b2-1bac360abd69\"\r\n        }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodesCaptchaUrlEnum {\r\n    Captcha = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<FriendsCollectionType>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC\r\n}","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: { [x: string]: any; })  => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {GetItemsType, instance} from \"./api\";\r\nimport {APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage = 1, pageSize = 10, term: string = \"\", isFriends: boolean | null = null) => {\r\n        return instance.get<GetItemsType>\r\n        (`users?page=${currentPage}&count=${pageSize}&term=${term}` + (isFriends === null ? \"\" : `&friend=${isFriends}`)).then(response => response.data);\r\n    },\r\n    follow: (userId: number) => {\r\n        return instance.post(`follow/` + userId).then(response => response.data);\r\n    },\r\n    unFollow: (userId: number) => {\r\n        return instance.delete(`follow/` + userId).then(response => response.data) as Promise<APIResponseType>;\r\n    }\r\n}","import { FriendsCollectionType } from \"../types/types\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {Dispatch} from \"redux\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\n\r\nlet initialState = {\r\n    friendsCollection: [] as Array<FriendsCollectionType>,\r\n    pageSize: 10 as number,\r\n    totalUserCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true as boolean,\r\n    isFollowing: [] as Array<number>,\r\n    filter: {\r\n        isFriends: null as boolean | null,\r\n        term: \"\" as string\r\n    }\r\n\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst peoples_reducer = (state = initialState, action: ActionTypes) : InitialState => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                friendsCollection: updateObjectInArray(state.friendsCollection,\r\n                    action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                friendsCollection: updateObjectInArray(state.friendsCollection,\r\n                    action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SET_USERS':\r\n            return {...state, friendsCollection: action.users}\r\n        case 'SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case 'SET_TOTAL_COUNT':\r\n            return {...state, totalUserCount: action.totalUsersCount}\r\n        case 'TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'SET_IS_FRIENDS':\r\n            return {...state, filter: {...state.filter, isFriends: action.isFriends}}\r\n        case 'SET_IS_TERM_SEARCH':\r\n            return {...state, filter: {...state.filter, term: action.term}}\r\n        case 'TOGGLE_IS_FOLLOWING':\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFetching\r\n                    ? [...state.isFollowing, action.userId]\r\n                    : state.isFollowing.filter(id => id !== action.userId)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>\r\n\r\n\r\nexport const actions = {\r\n    follow: (userId: number) => ({type: 'FOLLOW', userId} as const),\r\n    unFollow: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<FriendsCollectionType>) => ({type: 'SET_USERS', users} as const),\r\n    setIsFriends: (isFriends: boolean | null) => ({type: 'SET_IS_FRIENDS', isFriends} as const),\r\n    setTermSearch: (term: string) => ({type: 'SET_IS_TERM_SEARCH', term} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SET_TOTAL_COUNT', totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleIsFollowing:(isFetching: boolean, userId: number) => ({type: 'TOGGLE_IS_FOLLOWING', isFetching, userId} as const)\r\n}\r\n\r\ntype ThunkActionTypes = BaseThunkType<ActionTypes>\r\n\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number, term?: string, isFriends?: boolean | null): ThunkActionTypes => async (dispatch) => {\r\n\r\n    dispatch(actions.setCurrentPage(currentPage));\r\n    dispatch(actions.toggleIsFetching(true));\r\n\r\n    let data = await usersAPI.getUsers(currentPage, pageSize, term, isFriends);\r\n\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}\r\n\r\nconst userFollowUnFollowFlow = async (dispatch: Dispatch<ActionTypes>, userId: number,\r\n                                      apiMethod: any, actionCreator: (userId: number) => ActionTypes) => {\r\n\r\n    dispatch(actions.toggleIsFollowing(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.toggleIsFollowing(false, userId));\r\n        dispatch(actionCreator(userId));\r\n    }\r\n\r\n}\r\n\r\nexport const userFollow = (userId: number): ThunkActionTypes => async (dispatch) => {\r\n    await userFollowUnFollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.follow);\r\n}\r\n\r\nexport const userUnFollow = (userId: number): ThunkActionTypes => async (dispatch)=> {\r\n    await userFollowUnFollowFlow(dispatch, userId, usersAPI.unFollow.bind(usersAPI), actions.unFollow);\r\n}\r\n\r\n\r\nexport default peoples_reducer;","import {instance, APIResponseType} from \"./api\";\r\n\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    getAuth: () => {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(response => response.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) => {\r\n        return instance.post<APIResponseType<LoginResponseDataType>>(`auth/login`, {email, password, rememberMe, captcha}).then(response => response.data);\r\n    },\r\n    logout: () => {\r\n        return instance.delete(`auth/login`).then(response => response.data);\r\n    }\r\n}","import {APIResponseType, instance} from \"./api\";\r\n\r\ntype CaptchaUrlType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl: () => {\r\n        return instance.get<CaptchaUrlType>(`security/get-captcha-url`).then(response => response.data);\r\n    },\r\n}","import {ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {ProfileType} from \"../types/types\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\nimport {InferActionsType} from './redux-store';\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\n\r\nlet initialState = {\r\n    id: null as (number | null),\r\n    login: null as (string | null),\r\n    email: null as (string | null),\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as (string | null),\r\n    authProfile: null as (ProfileType | null)\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst auth_reducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case 'SET_AUTH_PROFILE':\r\n            return {\r\n                ...state,\r\n                authProfile: action.profile,\r\n            }\r\n        case 'SET_CAPTCHA':\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType< typeof actions>\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, login: string | null, email: string | null, isAuth: boolean) =>\r\n        ({type: 'SET_USER_DATA', data: {id, login, email, isAuth}} as const),\r\n    setAuthProfile: (profile: ProfileType) =>\r\n        ({type: 'SET_AUTH_PROFILE', profile} as const),\r\n    setCaptchaUrl: (url: string | null) =>\r\n        ({type: 'SET_CAPTCHA', payload: url} as const)\r\n}\r\n\r\n\r\n\r\n\r\ntype ThunkActionTypes = BaseThunkType<ActionTypes | FormAction>\r\n\r\n\r\nexport const userAuth = (): ThunkActionTypes => async (dispatch) => {\r\n    let data = await authAPI.getAuth();\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = data.data;\r\n        dispatch(actions.setAuthUserData(id, login, email, true));\r\n    }\r\n}\r\n\r\nexport const authLogin = (email: string, password: string, rememberMe: boolean, captcha?: string): ThunkActionTypes => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (data.resultCode === 0){\r\n        dispatch(userAuth())\r\n    }\r\n    else{\r\n        if(data.resultCode === 10){\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n\r\n}\r\nexport const authLogout = (): ThunkActionTypes => async (dispatch) => {\r\n    let data = await authAPI.logout();\r\n\r\n    if (data.resultCode === 0){\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n        dispatch(actions.setCaptchaUrl(null));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkActionTypes => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaUrl();\r\n    if(data){\r\n        dispatch(actions.setCaptchaUrl(data.url))\r\n    }\r\n        /*dispatch(actions.setCaptchaUrl(data.url));*/\r\n}\r\n\r\nexport const setAuthUserProfile = (userId: number): ThunkActionTypes => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setAuthProfile(data));\r\n}\r\n\r\nexport default auth_reducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1oM2n\",\"header_logo\":\"Header_header_logo__v90Xf\",\"header_auth\":\"Header_header_auth__NbCNy\",\"auth_name\":\"Header_auth_name__3TTcg\",\"auth_img\":\"Header_auth_img__jVody\",\"logOutMenu\":\"Header_logOutMenu__yAKne\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormError\":\"login_loginFormError__1yJUm\",\"header_login_form\":\"login_header_login_form__3ihYp\",\"login_page\":\"login_login_page__3Hn4_\",\"content_block_size\":\"login_content_block_size__2ueFE\",\"login_container_form\":\"login_login_container_form__185Ox\",\"header_logo\":\"login_header_logo__15TDc\",\"login_form\":\"login_login_form__3huEl\",\"login_checkbox_input\":\"login_login_checkbox_input__pQEOI\",\"login_button\":\"login_login_button__BCwNr\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if(value) {\r\n        return undefined;\r\n    }\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if(value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`;\r\n    }\r\n    return undefined;\r\n}","import React from 'react';\r\n// @ts-ignore\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {InlineIcon} from \"@iconify/react\";\r\nimport angleDown from \"@iconify-icons/uil/angle-down\";\r\nimport {ProfileType} from \"../../types/types\";\r\n// @ts-ignore\r\nimport userPhoto from \"../../assets/images/defaulIconProfile.png\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean,\r\n    profile: ProfileType | null\r\n    toggleLogOutMenu: () => void,\r\n    login: string | null,\r\n    authLogOutRedirect: () => void,\r\n    logOutMenu: boolean\r\n}\r\n\r\nconst Header: React.FC<PropsType> = (props) =>{\r\n\r\n    return(\r\n        <header className={s.header}>\r\n            <p className={s.header_logo}>\r\n                CF\r\n            </p>\r\n            {props.isAuth\r\n                ? <span className={s.header_auth} onClick={ props.toggleLogOutMenu }>\r\n                    <p className={s.auth_name}  >{ props.login } </p>\r\n                    {props.profile === null || props.profile.photos.large === null\r\n                        ? <img className={s.auth_img} src={userPhoto} alt={\"\"}/>\r\n                        : <img className={s.auth_img} src={props.profile.photos.large} alt={\"\"}/>\r\n                    } <InlineIcon icon={angleDown}/>\r\n\r\n            </span>\r\n                :/*<span className={s.header_auth}><NavLink to={\"/login\"}>Login</NavLink></span>*/\r\n                <span className={s.header_auth}>\r\n                    <NavLink to={\"/login\"} className={s.auth_name}>Login</NavLink>\r\n                </span>\r\n            }\r\n            {props.isAuth && props.logOutMenu\r\n            && <div className={s.logOutMenu}>\r\n                <button onClick={ props.authLogOutRedirect }>Log Out</button>\r\n            </div>}\r\n\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header';\r\nimport {connect} from \"react-redux\";\r\nimport {authLogout, setAuthUserProfile, userAuth} from \"../../redux/auth_reducer\";\r\nimport {RouterProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport {InitialStateType} from \"../../redux/profile_reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    id: number | null,\r\n    isAuth: boolean,\r\n    login: string | null,\r\n    profile: ProfileType | null,\r\n    profilePage: InitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    userAuth: () => void,\r\n    authLogout: () => void,\r\n    setAuthUserProfile: (userId: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouterProps\r\n\r\nclass HeaderContainer extends React.Component<PropsType>{\r\n\r\n    componentDidMount() {\r\n        if(this.props.id) {\r\n            this.props.setAuthUserProfile(this.props.id);\r\n        }\r\n    }\r\n\r\n    state = {\r\n        logOutMenu: false,\r\n    };\r\n\r\n    toggleLogOutMenu = () => {\r\n        this.setState({\r\n            logOutMenu: !this.state.logOutMenu\r\n        })\r\n    };\r\n    authLogOutRedirect = () => {\r\n        this.props.authLogout();\r\n        if(this.props.isAuth){\r\n            this.props.history.push(\"/peoples\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props} authLogOutRedirect={ this.authLogOutRedirect } toggleLogOutMenu={ this.toggleLogOutMenu } logOutMenu={ this.state.logOutMenu }/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return{\r\n        id: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n        profile: state.auth.authProfile,\r\n        profilePage: state.profilePage.profile\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps,\r\n        {userAuth, authLogout, setAuthUserProfile}),\r\n    withRouter,\r\n)(HeaderContainer);","import React from 'react';\r\nimport {Field, Fields, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {authLogin} from \"../../redux/auth_reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n// @ts-ignore\r\nimport s from './login.module.css';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet maxLength30 = maxLengthCreator(30);\r\n\r\ntype OwnPropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, OwnPropsType> & OwnPropsType> =\r\n    ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <div className={s.login_container_form + \" \" + s.content_block_size}>\r\n            <div className={s.header_login_form}>\r\n                <p className={s.header_logo}>\r\n                    CF\r\n                </p>\r\n                <h2>CubeFace</h2>\r\n            </div>\r\n\r\n\r\n            <form onSubmit={handleSubmit} className={s.login_form}>\r\n                <Field component={Input} name={\"email\"}\r\n                       placeholder={\"Логин: free@samuraijs.com\"}/>\r\n                <Field component={Input} name={\"password\"}\r\n                       placeholder={\"Пароль: free\"} type={\"password\"}/>\r\n\r\n                <div className={s.login_checkbox_input}>\r\n                    <Field  component={Input} name={\"rememberMe\"}\r\n                           type=\"checkbox\"/> remember me\r\n                </div>\r\n\r\n                {\r\n                    captchaUrl && <img src={captchaUrl} alt=\"\"/>\r\n                }\r\n                {\r\n                    captchaUrl && <Field component={Input} name={\"captcha\"}\r\n                                         placeholder={\"Введите код с картинки\"}/>\r\n                }\r\n                                {\r\n                    error !== null && <div className={s.loginFormError}>{error}</div>\r\n                }\r\n                <div className={s.login_button}>\r\n                    <button>Sign in</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnPropsType>({ form: 'login' })(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean,\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    authLogin: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nconst login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.authLogin(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    }\r\n\r\n    if (props.isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div className={s.login_page}>\r\n\r\n        <LoginReduxForm onSubmit={ onSubmit } captchaUrl={ props.captchaUrl }/>\r\n    </div>\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return{\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { authLogin })(login);","import {userAuth} from \"./auth_reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsType} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst AppReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type){\r\n        case 'SET_INITIALIZED':\r\n            return{\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SET_INITIALIZED'} as const)\r\n}\r\n\r\nexport const initializeApp = ():\r\n    ThunkAction<void, AppStateType, unknown, ActionTypes> => (dispatch) => {\r\n    let promise = dispatch(userAuth());\r\n\r\n\r\n/*    Promise.all([promise]).then(() => {\r\n        //Когда много промисов от диспатчей\r\n        dispatch(initializedSuccess());\r\n        dispatch(initializedSuccess());\r\n        dispatch(initializedSuccess());\r\n    })*/\r\n\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n}\r\n\r\n\r\nexport default AppReducer;","import React from 'react';\r\n// @ts-ignore\r\nimport s from './NavWrapper.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {InlineIcon} from \"@iconify/react\";\r\nimport userCircle from \"@iconify-icons/uil/user-circle\";\r\nimport commentIcon from \"@iconify-icons/uil/comment\";\r\nimport usersAlt from \"@iconify-icons/uil/users-alt\";\r\n\r\nconst NavWrapper = () => {\r\n    return (\r\n        <section className={s.nav_wrapper}>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <NavLink to=\"/profile\">\r\n                            <InlineIcon icon={ userCircle } className={s.nav_icons}/>\r\n                            My Profile\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/messages\">\r\n                            <InlineIcon icon={ commentIcon } className={s.nav_icons}/>\r\n                            Messages\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/peoples\">\r\n                            <InlineIcon icon={ usersAlt } className={s.nav_icons}/>\r\n                            Peoples\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NavWrapper;","import React, {Suspense} from \"react\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/login';\r\nimport {HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app_reducer\";\r\nimport './App.css';\r\nimport NavWrapper from \"./components/NavWrapper/NavWrapper\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {PreLoaderApp} from \"./components/common/PreLoader/PreLoader\";\r\nimport PreLoader from \"./components/common/PreLoader/PreLoader\";\r\n\r\nconst PeoplesPageContainer = React.lazy(() => import('./components/PeoplesPage/PeoplesPageContainer'));\r\nconst ProfilePageContainer = React.lazy(() => import('./components/ProfilePage/ProfilePageContainer'));\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n\r\n        if(!this.props.initialized){\r\n            return <PreLoaderApp/>\r\n        }\r\n        return (\r\n            <HashRouter>\r\n                <div className=\"container\">\r\n                    <HeaderContainer/>\r\n                    <NavWrapper/>\r\n                    <Switch>\r\n                        <Route exact path=\"/\"\r\n                               render={() => {\r\n                                   return <Redirect to=\"/profile\"/>\r\n                               }}/>\r\n                        <Route path=\"/peoples\"\r\n                               render={() => {\r\n                                   return <Suspense fallback={<PreLoader/>}><PeoplesPageContainer/></Suspense>\r\n                               }}/>\r\n\r\n                        <Route path=\"/profile/:userId?\"\r\n                               render={() => {\r\n                                   return <Suspense fallback={<PreLoader/>}><ProfilePageContainer/></Suspense>\r\n                               }}/>\r\n\r\n                        {/*                    <Route path=\"/friends_content\" render={() => <FriendsContentContainer/>}/>*/}\r\n\r\n\r\n                    </Switch>\r\n                </div>\r\n                <Route path=\"/login\" render={() => <Login/>}/>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return{\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))\r\n    (App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\n\r\ntype DialogsType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\ntype MessagesType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n\r\n    dialogs_data: [\r\n        {id: 1, name: \"Anastasiya\"},\r\n        {id: 2, name: \"Dinar\"},\r\n        {id: 3, name: \"Egor\"},\r\n        {id: 4, name: \"Artur\"}\r\n    ] as Array<DialogsType>,\r\n    messages_data: [\r\n        {id: 1, message: \"Hello!\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Iam okay! And you?\"},\r\n        {id: 4, message: \"And I.\"}\r\n    ] as Array<MessagesType>,\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst messages_reducer = (state = initialState, action: any): InitialState => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                //TODO: Сделать зануление поля ввода после отправки сообщения!\r\n                messages_data: [...state.messages_data, {id: 6, message: action.newMessageText}]\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype addMessageType = {\r\n    type: typeof ADD_MESSAGE,\r\n    newMessageText: string\r\n}\r\n\r\nexport const addMessage = (newMessageText: string): addMessageType => ({ type: ADD_MESSAGE, newMessageText })\r\n\r\nexport default messages_reducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profile_reducer from \"./profile_reducer\";\r\nimport messages_reducer from \"./messages_reducer\";\r\nimport peoples_reducer from \"./peoples_reducer\";\r\nimport auth_reducer from \"./auth_reducer\";\r\nimport thunkMiddleWare, {ThunkAction} from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport app_reducer from \"./app_reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profile_reducer,\r\n    messagesPage: messages_reducer,\r\n    friendsPage: peoples_reducer,\r\n    auth: auth_reducer,\r\n    form: formReducer,\r\n    app: app_reducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer // (globalstate: AppStateType) => AppStateType\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type BaseThunkType <A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare)));\r\n\r\nexport default store;","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nrender(\r\n\r\n    <BrowserRouter>\r\n        <Provider store={ store }>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance} from \"./api\";\r\nimport {APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile: (userId: number) => {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(response => response.data);\r\n    },\r\n    getStatus: (userId: number) => {\r\n        return instance.get<string>(`profile/status/` + userId).then(response => response.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(response => response.data);\r\n    },\r\n    savePhoto: (photoFile: any) => {\r\n        let formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data);\r\n    },\r\n    saveProfile: (profile: ProfileType) => {\r\n        return instance.put(`profile`, profile).then(response => response.data);\r\n    }\r\n}","import React from 'react';\r\n// @ts-ignore\r\nimport s from \"./PreLoader.module.css\";\r\n\r\nconst PreLoader = () => {\r\n    return (\r\n        <div className={s.preloader}>\r\n            <div className={s.ldsCircle}>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PreLoader;\r\n\r\nexport const PreLoaderApp = () => {\r\n    return (\r\n        <div className={s.preloaderApp}>\r\n            <div className={s.ldsCircle}>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {WrappedFieldInputProps, WrappedFieldMetaProps} from 'redux-form/lib/Field';\r\n// @ts-ignore\r\nimport s from './FormsControl.module.css';\r\n\r\n/*export const InputArea = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={(hasError ? s.error : \"\") + \" \" + (hasError ? s.warn : \"\")}>\r\n            <input {...input} {...props} />\r\n            { hasError &&  <span>{ meta.error }</span> }\r\n        </div>\r\n    );\r\n};*/\r\n\r\ntype FormsControlParams = {\r\n    meta: WrappedFieldMetaProps,\r\n    input: WrappedFieldInputProps\r\n}\r\ntype FormControlType = (params: FormsControlParams) => React.ReactNode\r\n\r\n\r\nexport const Input: FormControlType = ({input, meta: {touched, error}, ...props}) => {\r\n\r\n    const hasError: WrappedFieldMetaProps = touched && error;\r\n\r\n    return (\r\n        <div className={(hasError ? s.error : \"\") + \" \" + (hasError ? s.warn : \"\")}>\r\n            <input {...input} {...props} />\r\n            { hasError && <div> <span>{ error }</span> </div>   }\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_wrapper\":\"NavWrapper_nav_wrapper__aNcfn\",\"nav_icons\":\"NavWrapper_nav_icons__2OIZO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"PreLoader_preloader__3b8b7\",\"preloaderApp\":\"PreLoader_preloaderApp__1mEMX\",\"ldsCircle\":\"PreLoader_ldsCircle__3w9uk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControl_error__2zMON\",\"warn\":\"FormsControl_warn__25gNz\"};","export default __webpack_public_path__ + \"static/media/defaulIconProfile.503ee88f.png\";","import {setAuthUserProfile} from \"./auth_reducer\";\r\nimport {ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\n\r\n\r\n\r\nexport type PostsCollectionType = {\r\n    id: number,\r\n    message: string | null,\r\n    username: string\r\n}\r\n\r\n\r\nlet initialState = {\r\n    profile: null as (ProfileType | any),\r\n    postsCollection: [] as (Array<PostsCollectionType> | any),\r\n    status: \"\" as (string | null),\r\n    isOwner: false as boolean,\r\n    newPostText: '' as (string | null)\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profile_reducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'ADD_POST':\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                //TODO: Сделать нормальную привязку имени к постам!!!\r\n                postsCollection: [...state.postsCollection, {id: 6, message: action.newPostText, username: state.profile.fullName}]\r\n            };\r\n        case 'SET_PROFILE':\r\n            return {...state, profile: action.profile}\r\n\r\n        case 'SET_STATUS':\r\n            if(action.status === null || action.status === \"\"){\r\n                return {...state, status: \"Write your status!\"}\r\n\r\n            }else{\r\n                return {...state, status: action.status}\r\n            }\r\n        case 'SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n\r\n        case 'SET_IS_OWNER':\r\n            return {...state, isOwner: action.isOwner}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>\r\n\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\r\n    setProfile: (profile: any) => ({type: 'SET_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SET_STATUS', status} as const),\r\n    setIsOwner: (isOwner: boolean) => ({type: 'SET_IS_OWNER', isOwner} as const),\r\n    savePhotoSuccess: (photos: any) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\n\r\ntype ThunkActionTypes = BaseThunkType<ActionTypes | FormAction>\r\n\r\nexport const addPostProfile = (newPostText: string): ThunkActionTypes => async (dispatch) => {\r\n    debugger\r\n    if(newPostText === undefined){\r\n\r\n        dispatch(stopSubmit('postAdd', { error: \"Input can't be empty\" }))\r\n    }else{\r\n        dispatch(actions.addPost(newPostText))\r\n    }\r\n\r\n}\r\n\r\nexport const setUserProfile = (userId: number): ThunkActionTypes => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n\r\n    dispatch(actions.setProfile(data));\r\n}\r\n\r\n\r\nexport const getUserStatus = (userId: number): ThunkActionTypes => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\n\r\nexport const updateUserStatus = (status: string): ThunkActionTypes => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n\r\n    if (data.resultCode === 0)\r\n        dispatch(actions.setStatus(status));\r\n\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkActionTypes => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    let data = await profileAPI.savePhoto(file)\r\n\r\n    if (data.resultCode === 0){\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n        if (userId !== null) {\r\n            await dispatch(setAuthUserProfile(userId));\r\n        }else{\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkActionTypes => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    let data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0){\r\n        if (userId !== null) {\r\n            await dispatch(setUserProfile(userId));\r\n            await dispatch(setAuthUserProfile(userId));\r\n        }else{\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n        //TODO: Релизовать нормальную передачу данных в Header компоненту\r\n    }\r\n}\r\n\r\n\r\nexport default profile_reducer;"],"sourceRoot":""}