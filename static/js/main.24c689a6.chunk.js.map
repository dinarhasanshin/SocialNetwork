{"version":3,"sources":["utils/object-helpers.ts","api/users-api.ts","redux/peoples_reducer.ts","api/api.ts","components/Login/login.module.css","api/auth-api.ts","redux/auth_reducer.ts","components/Header/Header.module.css","utils/validators/validators.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/login.tsx","redux/app_reducer.ts","components/NavWrapper/NavWrapper.tsx","App.tsx","reportWebVitals.js","redux/messages_reducer.ts","redux/redux-store.ts","index.tsx","api/profile-api.ts","components/NavWrapper/NavWrapper.module.css","components/common/FormsControl/FormsControl.tsx","components/common/FormsControl/FormsControl.module.css","redux/profile_reducer.ts"],"names":["updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","usersAPI","getUsers","currentPage","pageSize","instance","get","then","response","data","follow","userId","post","unFollow","delete","initialState","friendsCollection","totalUserCount","isFetching","isFollowing","actions","type","users","totalUsersCount","dispatch","a","userFollowUnFollowFlow","apiMethod","actionCreator","resultCode","userFollow","bind","userUnFollow","peoples_reducer","state","action","followed","filter","id","ResultCodesEnum","ResultCodesCaptchaUrlEnum","axios","create","withCredentials","baseURL","headers","module","exports","authAPI","email","password","rememberMe","login","isAuth","authProfile","profile","userAuth","Success","authLogin","message","messages","length","stopSubmit","_error","authLogout","setAuthUserProfile","profileAPI","getProfile","auth_reducer","maxLength","Header","props","className","s","header","header_logo","header_auth","onClick","toggleLogOutMenu","auth_name","photos","large","auth_img","src","alt","icon","angleDown","to","logOutMenu","authLogOutRedirect","HeaderContainer","setState","history","push","this","React","Component","compose","connect","auth","profilePage","withRouter","required","value","maxLength30","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","component","Input","name","placeholder","validate","loginFormError","formData","initialized","AppReducer","NavWrapper","nav_wrapper","userCircle","nav_icons","commentIcon","usersAlt","PeoplesPageContainer","lazy","ProfilePageContainer","App","initializeApp","exact","path","render","fallback","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_MESSAGE","dialogs_data","messages_data","messages_reducer","newMessageText","rootReducer","combineReducers","profile_reducer","messagesPage","friendsPage","formReducer","app_reducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","document","getElementById","getStatus","updateStatus","status","put","savePhoto","photoFile","FormData","append","saveProfile","input","meta","touched","hasError","warn","postsCollection","isOwner","newPostText","addPost","setProfile","setStatus","setIsOwner","savePhotoSuccess","setUserProfile","getUserStatus","updateUserStatus","file","getState","Error","username","fullName"],"mappings":"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","file":"static/js/main.24c689a6.chunk.js","sourcesContent":["\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: { [x: string]: any; })  => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {GetItemsType, instance} from \"./api\";\r\nimport {APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage = 1, pageSize = 10) => {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data);\r\n    },\r\n    follow: (userId: number) => {\r\n        return instance.post(`follow/` + userId).then(response => response.data);\r\n    },\r\n    unFollow: (userId: number) => {\r\n        return instance.delete(`follow/` + userId).then(response => response.data) as Promise<APIResponseType>;\r\n    }\r\n}","import { FriendsCollectionType } from \"../types/types\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\n\r\nlet initialState = {\r\n    friendsCollection: [] as Array<FriendsCollectionType>,\r\n    pageSize: 10 as number,\r\n    totalUserCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true as boolean,\r\n    isFollowing: [] as Array<number>\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst peoples_reducer = (state = initialState, action: ActionTypes) : InitialState => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                friendsCollection: updateObjectInArray(state.friendsCollection,\r\n                    action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                friendsCollection: updateObjectInArray(state.friendsCollection,\r\n                    action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SET_USERS':\r\n            return {...state, friendsCollection: action.users}\r\n        case 'SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case 'SET_TOTAL_COUNT':\r\n            return {...state, totalUserCount: action.totalUsersCount}\r\n        case 'TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'TOGGLE_IS_FOLLOWING':\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFetching\r\n                    ? [...state.isFollowing, action.userId]\r\n                    : state.isFollowing.filter(id => id !== action.userId)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>\r\n\r\n\r\nexport const actions = {\r\n    follow: (userId: number) => ({type: 'FOLLOW', userId} as const),\r\n    unFollow: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<FriendsCollectionType>) => ({type: 'SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SET_TOTAL_COUNT', totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleIsFollowing:(isFetching: boolean, userId: number) => ({type: 'TOGGLE_IS_FOLLOWING', isFetching, userId} as const)\r\n}\r\n\r\ntype ThunkActionTypes = BaseThunkType<ActionTypes>\r\n\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkActionTypes => async (dispatch) => {\r\n\r\n    dispatch(actions.setCurrentPage(currentPage));\r\n    dispatch(actions.toggleIsFetching(true));\r\n\r\n    let data = await usersAPI.getUsers(currentPage, pageSize);\r\n\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    /*dispatch(setTotalUsersCount(data.totalCount));*/\r\n    dispatch(actions.setTotalUsersCount(400));\r\n}\r\n\r\nconst userFollowUnFollowFlow = async (dispatch: Dispatch<ActionTypes>, userId: number,\r\n                                      apiMethod: any, actionCreator: (userId: number) => ActionTypes) => {\r\n\r\n    dispatch(actions.toggleIsFollowing(true, userId));\r\n\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.toggleIsFollowing(false, userId));\r\n        dispatch(actionCreator(userId));\r\n    }\r\n\r\n}\r\n\r\nexport const userFollow = (userId: number): ThunkActionTypes => async (dispatch) => {\r\n    await userFollowUnFollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.follow);\r\n}\r\n\r\nexport const userUnFollow = (userId: number): ThunkActionTypes => async (dispatch)=> {\r\n    await userFollowUnFollowFlow(dispatch, userId, usersAPI.unFollow.bind(usersAPI), actions.unFollow);\r\n}\r\n\r\n\r\nexport default peoples_reducer;","import axios from \"axios\";\r\nimport {FriendsCollectionType} from \"../types/types\";\r\n\r\n\r\nexport const instance = axios.create\r\n({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\" : \"edee3bdd-3755-424a-b6b2-1bac360abd69\"\r\n        }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodesCaptchaUrlEnum {\r\n    Captcha = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<FriendsCollectionType>,\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormError\":\"login_loginFormError__36L_J\"};","import {instance, APIResponseType} from \"./api\";\r\n\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    getAuth: () => {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(response => response.data);\r\n    },\r\n    login: (email: string, password: string, rememberMe: boolean = false) => {\r\n        return instance.post<APIResponseType<LoginResponseDataType>>(`auth/login`, {email, password, rememberMe}).then(response => response.data);\r\n    },\r\n    logout: () => {\r\n        return instance.delete(`auth/login`).then(response => response.data);\r\n    }\r\n}","import {ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {ProfileType} from \"../types/types\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\nimport {InferActionsType} from './redux-store';\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\n\r\nlet initialState = {\r\n    id: null as (number | null),\r\n    login: null as (string | null),\r\n    email: null as (string | null),\r\n    isAuth: false as boolean,\r\n    authProfile: null as (ProfileType | null)\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst auth_reducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case 'SET_AUTH_PROFILE':\r\n            return {\r\n                ...state,\r\n                authProfile: action.profile,\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType< typeof actions>\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, login: string | null, email: string | null, isAuth: boolean) =>\r\n        ({type: 'SET_USER_DATA', data: { id, login, email, isAuth }} as const),\r\n    setAuthProfile: (profile: ProfileType) =>\r\n        ({type: 'SET_AUTH_PROFILE', profile} as const)\r\n}\r\n\r\n\r\n\r\n\r\ntype ThunkActionTypes = BaseThunkType<ActionTypes | FormAction>\r\n\r\n\r\nexport const userAuth = (): ThunkActionTypes => async (dispatch) => {\r\n    let data = await authAPI.getAuth();\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = data.data;\r\n        dispatch(actions.setAuthUserData(id, login, email, true));\r\n    }\r\n}\r\n\r\nexport const authLogin = (email: string, password: string, rememberMe: boolean): ThunkActionTypes => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe)\r\n\r\n    if (data.resultCode === 0){\r\n        dispatch(userAuth())\r\n    } else{\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n\r\n}\r\nexport const authLogout = (): ThunkActionTypes => async (dispatch) => {\r\n    let data = await authAPI.logout();\r\n\r\n    if (data.resultCode === 0){\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport const setAuthUserProfile = (userId: number): ThunkActionTypes => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setAuthProfile(data));\r\n}\r\n\r\nexport default auth_reducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1zumi\",\"header_logo\":\"Header_header_logo__2ZxYF\",\"header_auth\":\"Header_header_auth__1_Rhm\",\"auth_name\":\"Header_auth_name__3BnJb\",\"auth_img\":\"Header_auth_img__2jIJJ\",\"logOutMenu\":\"Header_logOutMenu__2SvZZ\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if(value) {\r\n        return undefined;\r\n    }\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if(value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`;\r\n    }\r\n    return undefined;\r\n}","import React from 'react';\r\n// @ts-ignore\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {InlineIcon} from \"@iconify/react\";\r\nimport angleDown from \"@iconify-icons/uil/angle-down\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean,\r\n    profile: ProfileType | null\r\n    toggleLogOutMenu: () => void,\r\n    login: string | null,\r\n    authLogOutRedirect: () => void,\r\n    logOutMenu: boolean\r\n}\r\n\r\nconst Header: React.FC<PropsType> = (props) =>{\r\n\r\n    return(\r\n        <header className={s.header}>\r\n            <p className={s.header_logo}>\r\n                CF\r\n            </p>\r\n            {props.isAuth\r\n                ? <span className={s.header_auth} onClick={ props.toggleLogOutMenu }>\r\n                    <p className={s.auth_name}  >{ props.login } </p>\r\n                    {props.profile === null || props.profile.photos.large === null\r\n                        ? <p className={s.auth_img}/>\r\n                        : <img className={s.auth_img} src={props.profile.photos.large} alt={\"\"}/>\r\n                    } <InlineIcon icon={angleDown}/>\r\n\r\n            </span>\r\n                :<span className={s.header_auth}><NavLink to={\"/login\"}>Login</NavLink></span>\r\n            }\r\n            {props.isAuth && props.logOutMenu\r\n            && <div className={s.logOutMenu}>\r\n                <button onClick={ props.authLogOutRedirect }>Log Out</button>\r\n            </div>}\r\n\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header';\r\nimport {connect} from \"react-redux\";\r\nimport {authLogout, setAuthUserProfile, userAuth} from \"../../redux/auth_reducer\";\r\nimport {RouterProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport {InitialStateType} from \"../../redux/profile_reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    id: number | null,\r\n    isAuth: boolean,\r\n    login: string | null,\r\n    profile: ProfileType | null,\r\n    profilePage: InitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    userAuth: () => void,\r\n    authLogout: () => void,\r\n    setAuthUserProfile: (userId: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouterProps\r\n\r\nclass HeaderContainer extends React.Component<PropsType>{\r\n\r\n    componentDidMount() {\r\n        if(this.props.id) {\r\n            this.props.setAuthUserProfile(this.props.id);\r\n        }\r\n    }\r\n\r\n    state = {\r\n        logOutMenu: false,\r\n    };\r\n\r\n    toggleLogOutMenu = () => {\r\n        this.setState({\r\n            logOutMenu: !this.state.logOutMenu\r\n        })\r\n    };\r\n    authLogOutRedirect = () => {\r\n        debugger\r\n        this.props.authLogout();\r\n        if(this.props.isAuth){\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props} authLogOutRedirect={ this.authLogOutRedirect } toggleLogOutMenu={ this.toggleLogOutMenu } logOutMenu={ this.state.logOutMenu }/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return{\r\n        id: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n        profile: state.auth.authProfile,\r\n        profilePage: state.profilePage.profile\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {userAuth, authLogout, setAuthUserProfile}),\r\n    withRouter,\r\n)(HeaderContainer);","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {authLogin} from \"../../redux/auth_reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n// @ts-ignore\r\nimport s from './login.module.css';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet maxLength30 = maxLengthCreator(30);\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <div>\r\n                <Field component={Input} name={\"email\"}\r\n                       placeholder={\"Email\"} validate={ [required, maxLength30] }/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"password\"}\r\n                       placeholder={\"Password\"} type={\"password\"} validate={ [required, maxLength30] }/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"}\r\n                       type=\"checkbox\" /> remember me\r\n            </div>\r\n            {\r\n                error !== null && <div className={s.loginFormError}>{ error }</div>\r\n            }\r\n            <div>\r\n                <button>Sign in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType>({ form: 'login' })(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    authLogin: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nconst login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.authLogin(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={ onSubmit }/>\r\n    </div>\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return{\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { authLogin })(login);","import {userAuth} from \"./auth_reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsType} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst AppReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type){\r\n        case 'SET_INITIALIZED':\r\n            return{\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SET_INITIALIZED'} as const)\r\n}\r\n\r\nexport const initializeApp = ():\r\n    ThunkAction<void, AppStateType, unknown, ActionTypes> => (dispatch) => {\r\n    let promise = dispatch(userAuth());\r\n\r\n\r\n/*    Promise.all([promise]).then(() => {\r\n        //Когда много промисов от диспатчей\r\n        dispatch(initializedSuccess());\r\n        dispatch(initializedSuccess());\r\n        dispatch(initializedSuccess());\r\n    })*/\r\n\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n}\r\n\r\n\r\nexport default AppReducer;","import React from 'react';\r\n// @ts-ignore\r\nimport s from './NavWrapper.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {InlineIcon} from \"@iconify/react\";\r\nimport userCircle from \"@iconify-icons/uil/user-circle\";\r\nimport commentIcon from \"@iconify-icons/uil/comment\";\r\nimport usersAlt from \"@iconify-icons/uil/users-alt\";\r\n\r\nconst NavWrapper = () => {\r\n    return (\r\n        <section className={s.nav_wrapper}>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <NavLink to=\"/profile\">\r\n                            <InlineIcon icon={ userCircle } className={s.nav_icons}/>\r\n                            My Profile\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/messages\">\r\n                            <InlineIcon icon={ commentIcon } className={s.nav_icons}/>\r\n                            Messages\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/peoples\">\r\n                            <InlineIcon icon={ usersAlt } className={s.nav_icons}/>\r\n                            Peoples\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NavWrapper;","import React, {Suspense} from \"react\";\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/login';\r\nimport {HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app_reducer\";\r\nimport './App.css';\r\nimport NavWrapper from \"./components/NavWrapper/NavWrapper\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\n\r\nconst PeoplesPageContainer = React.lazy(() => import('./components/PeoplesPage/PeoplesPageContainer'));\r\nconst ProfilePageContainer = React.lazy(() => import('./components/ProfilePage/ProfilePageContainer'));\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n\r\n        if(!this.props.initialized){\r\n            return <p>Loading...</p>\r\n        }\r\n        return (\r\n            <HashRouter>\r\n                <div className=\"container\">\r\n                    <HeaderContainer/>\r\n                    <NavWrapper/>\r\n                    <Switch>\r\n                        <Route exact path=\"/\"\r\n                               render={() => {\r\n                                   return <Redirect to=\"/profile\"/>\r\n                               }}/>\r\n                        <Route path=\"/peoples\"\r\n                               render={() => {\r\n                                   return <Suspense fallback={<div>Loading....</div>}><PeoplesPageContainer/></Suspense>\r\n                               }}/>\r\n\r\n                        <Route path=\"/profile/:userId?\"\r\n                               render={() => {\r\n                                   return <Suspense fallback={<div>Loading....</div>}><ProfilePageContainer/></Suspense>\r\n                               }}/>\r\n\r\n                        {/*                    <Route path=\"/friends_content\" render={() => <FriendsContentContainer/>}/>*/}\r\n\r\n                        <Route path=\"/login\" render={() => <Login/>}/>\r\n                    </Switch>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return{\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))\r\n    (App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\n\r\ntype DialogsType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\ntype MessagesType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n\r\n    dialogs_data: [\r\n        {id: 1, name: \"Anastasiya\"},\r\n        {id: 2, name: \"Dinar\"},\r\n        {id: 3, name: \"Egor\"},\r\n        {id: 4, name: \"Artur\"}\r\n    ] as Array<DialogsType>,\r\n    messages_data: [\r\n        {id: 1, message: \"Hello!\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Iam okay! And you?\"},\r\n        {id: 4, message: \"And I.\"}\r\n    ] as Array<MessagesType>,\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst messages_reducer = (state = initialState, action: any): InitialState => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                //TODO: Сделать зануление поля ввода после отправки сообщения!\r\n                messages_data: [...state.messages_data, {id: 6, message: action.newMessageText}]\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\ntype addMessageType = {\r\n    type: typeof ADD_MESSAGE,\r\n    newMessageText: string\r\n}\r\n\r\nexport const addMessage = (newMessageText: string): addMessageType => ({ type: ADD_MESSAGE, newMessageText })\r\n\r\nexport default messages_reducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profile_reducer from \"./profile_reducer\";\r\nimport messages_reducer from \"./messages_reducer\";\r\nimport peoples_reducer from \"./peoples_reducer\";\r\nimport auth_reducer from \"./auth_reducer\";\r\nimport thunkMiddleWare, {ThunkAction} from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport app_reducer from \"./app_reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profile_reducer,\r\n    messagesPage: messages_reducer,\r\n    friendsPage: peoples_reducer,\r\n    auth: auth_reducer,\r\n    form: formReducer,\r\n    app: app_reducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer // (globalstate: AppStateType) => AppStateType\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type BaseThunkType <A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare)));\r\n\r\nexport default store;","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nrender(\r\n\r\n    <BrowserRouter>\r\n        <Provider store={ store }>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance} from \"./api\";\r\nimport {APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile: (userId: number) => {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(response => response.data);\r\n    },\r\n    getStatus: (userId: number) => {\r\n        return instance.get<string>(`profile/status/` + userId).then(response => response.data);\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(response => response.data);\r\n    },\r\n    savePhoto: (photoFile: any) => {\r\n        let formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data);\r\n    },\r\n    saveProfile: (profile: ProfileType) => {\r\n        return instance.put(`profile`, profile).then(response => response.data);\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_wrapper\":\"NavWrapper_nav_wrapper__1QS88\",\"nav_icons\":\"NavWrapper_nav_icons__3OGds\"};","import React from 'react';\r\nimport {WrappedFieldInputProps, WrappedFieldMetaProps} from 'redux-form/lib/Field';\r\n// @ts-ignore\r\nimport s from './FormsControl.module.css';\r\n\r\n/*export const InputArea = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={(hasError ? s.error : \"\") + \" \" + (hasError ? s.warn : \"\")}>\r\n            <input {...input} {...props} />\r\n            { hasError &&  <span>{ meta.error }</span> }\r\n        </div>\r\n    );\r\n};*/\r\n\r\ntype FormsControlParams = {\r\n    meta: WrappedFieldMetaProps,\r\n    input: WrappedFieldInputProps\r\n}\r\ntype FormControlType = (params: FormsControlParams) => React.ReactNode\r\n\r\n\r\nexport const Input: FormControlType = ({input, meta: {touched, error}, ...props}) => {\r\n\r\n    const hasError: WrappedFieldMetaProps = touched && error;\r\n\r\n    return (\r\n        <div className={(hasError ? s.error : \"\") + \" \" + (hasError ? s.warn : \"\")}>\r\n            <input {...input} {...props} />\r\n            { hasError && <div> <span>{ error }</span> </div>   }\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControl_error__1DVyx\",\"warn\":\"FormsControl_warn__btXKx\"};","import {setAuthUserProfile} from \"./auth_reducer\";\r\nimport {ProfileType} from \"../types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsType} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\n\r\n\r\nexport type PostsCollectionType = {\r\n    id: number,\r\n    message: string | null,\r\n    username: string\r\n}\r\n\r\n\r\nlet initialState = {\r\n    profile: null as (ProfileType | any),\r\n    postsCollection: [] as (Array<PostsCollectionType> | any),\r\n    status: \"\" as (string | null),\r\n    isOwner: false as boolean,\r\n    newPostText: '' as (string | null)\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profile_reducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'ADD_POST':\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                //TODO: Сделать нормальную привязку имени к постам!!!\r\n                postsCollection: [...state.postsCollection, {id: 6, message: action.newPostText, username: state.profile.fullName}]\r\n            };\r\n        case 'SET_PROFILE':\r\n            return {...state, profile: action.profile}\r\n\r\n        case 'SET_STATUS':\r\n            if(action.status === null || action.status === \"\"){\r\n                return {...state, status: \"Write your status!\"}\r\n\r\n            }else{\r\n                return {...state, status: action.status}\r\n            }\r\n        case 'SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n\r\n        case 'SET_IS_OWNER':\r\n            return {...state, isOwner: action.isOwner}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsType<typeof actions>\r\n\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\r\n    setProfile: (profile: any) => ({type: 'SET_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SET_STATUS', status} as const),\r\n    setIsOwner: (isOwner: boolean) => ({type: 'SET_IS_OWNER', isOwner} as const),\r\n    savePhotoSuccess: (photos: any) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\n\r\ntype ThunkActionTypes = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\n\r\nexport const setUserProfile = (userId: number): ThunkActionTypes => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n\r\n    dispatch(actions.setProfile(data));\r\n}\r\n\r\n\r\nexport const getUserStatus = (userId: number): ThunkActionTypes => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\n\r\nexport const updateUserStatus = (status: string): ThunkActionTypes => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n\r\n    if (data.resultCode === 0)\r\n        dispatch(actions.setStatus(status));\r\n\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkActionTypes => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    let data = await profileAPI.savePhoto(file)\r\n\r\n    if (data.resultCode === 0){\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n        if (userId !== null) {\r\n            dispatch(setAuthUserProfile(userId));\r\n        }else{\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkActionTypes => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    let data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0){\r\n        if (userId !== null) {\r\n            dispatch(setUserProfile(userId));\r\n            dispatch(setAuthUserProfile(userId));\r\n        }else{\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n        //TODO: Релизовать нормальную передачу данных в Header компоненту\r\n    }\r\n}\r\n\r\n\r\nexport default profile_reducer;"],"sourceRoot":""}